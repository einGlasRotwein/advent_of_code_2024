---
title: "Advent of Code 2024"
format: gfm
editor: source
execute:
  echo: false
  warning: false
  message: false
fig-dpi: 300
---

```{r}
library(tidyverse)
library(extrafont)
library(ggstar)

aoc_green <- "#009900"
aoc_gold <- "#ffff66"
github_grey <- "#0d1117"

# AoC-ish plot theme that blends into the GitHub dark mode
aoc_theme <- 
  theme(
    panel.background = element_rect(fill = NA, colour = NA, linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_rect(fill = github_grey, colour = github_grey),
    plot.title = element_text(colour = "white", size = 20, family = "Consolas"),
    strip.background = element_rect(fill = NA, colour = NA),
    strip.text = element_text(size = 16, colour = aoc_green),
    axis.text = element_text(size = 12, colour = "white", family = "Consolas"),
    axis.title = element_text(size = 14, colour = "white", family = "Consolas"),
    axis.line = element_line(colour = "white", linewidth = .5),
    axis.ticks = element_line(colour = "white", linewidth = .5),
    legend.position = "none"
  )

past_performance <- 
  data.frame(
    year = factor(2020:2024),
    stars = c(31, 33, 30, 40, 10)
  )
```

This repo contains my solutions for the [Advent of Code 2024](https://adventofcode.com/2024) in `R`. This year, I'll be taking Posit's new IDE [Positron](https://positron.posit.co/) for a spin! Watch my stream (in German) [on Twitch](https://www.twitch.tv/einglasrotwein).

Here's my past performance (and this year's performance, so far):

```{r}
#| label: fig-performance
#| fig.height: 2.5
past_performance %>% 
  ggplot(aes(x = year, y = stars)) +
  geom_star(fill = aoc_gold, size = 5) +
  geom_path(colour = aoc_gold, group = 1) +
  scale_y_continuous(
    # breaks = seq(30, 40, 2), 
    limits = c(min(past_performance$stars) - 1, max(past_performance$stars) + 1)
    ) +
  aoc_theme
```

## TOC

Here is a table of contents showing you what each day was about, along with some stats.
Completion time refers to the time it took me to complete the puzzle since release (part 1, and part 2 in brackets), as tracked on the Advent of Code website.
Next is my rank for the puzzle on that day (part 1 (part 2)), and finally the runtime of my code.
It's a crude measure of runtime, where I simply calculate the difference in `Sys.time()` at the beginning and the end of part 1, and the beginning and end of part 2. 
That means in some occasions, the runtime for part 2 will be much shorter because part of the code needed to solve part 2 was already run in part 1. 
Reading in the data (and sometimes, basic preprocessing that has nothing to do with the puzzle solution) is excluded from the run time calculations.

| Day | Title                   | Completion Time     | Rank          | Run Time            |
|---------------|---------------|---------------|---------------|---------------|
| 1   | Historian Hysteria        | 13:08:13 (13:16:14) | 70868 (66063)   | 0.27 (1.33) ms     |
| 2   | Red-Nosed Reports        | 14:11:06 (14:17:57) | 88084 (64158)   | 12.70 (34.26) ms     |
| 3   | Mull It Over        | 03:49:20 (05:05:54) | 36003 (34641)   | 4.45 (3.29) ms     |
| 4   | Ceres Search        | 16:05:33 (16:26:25) | 69554 (62454)   | 340.38 (241.18) ms     |
| 5   | Print Queue        | 15:47:12 (16:07:47) | 61726 (52059)   | 10.62 (38.25) ms     |
